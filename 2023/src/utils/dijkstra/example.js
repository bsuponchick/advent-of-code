"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dijkstra_1 = require("./dijkstra");
const execute = () => {
    const graph = new dijkstra_1.Graph();
    const zero = new dijkstra_1.Node({ id: 0 });
    const one = new dijkstra_1.Node({ id: 1 });
    const two = new dijkstra_1.Node({ id: 2 });
    const three = new dijkstra_1.Node({ id: 3 });
    const four = new dijkstra_1.Node({ id: 4 });
    const five = new dijkstra_1.Node({ id: 5 });
    const six = new dijkstra_1.Node({ id: 6 });
    graph.addNode(zero);
    graph.addNode(one);
    graph.addNode(two);
    graph.addNode(three);
    graph.addNode(four);
    graph.addNode(five);
    graph.addNode(six);
    graph.addEdge(new dijkstra_1.Edge({ start: zero, end: one, weight: 2 }));
    graph.addEdge(new dijkstra_1.Edge({ start: zero, end: two, weight: 6 }));
    graph.addEdge(new dijkstra_1.Edge({ start: one, end: three, weight: 5 }));
    graph.addEdge(new dijkstra_1.Edge({ start: two, end: three, weight: 8 }));
    graph.addEdge(new dijkstra_1.Edge({ start: three, end: five, weight: 15 }));
    graph.addEdge(new dijkstra_1.Edge({ start: three, end: four, weight: 10 }));
    graph.addEdge(new dijkstra_1.Edge({ start: four, end: six, weight: 2 }));
    graph.addEdge(new dijkstra_1.Edge({ start: four, end: five, weight: 6 }));
    graph.addEdge(new dijkstra_1.Edge({ start: five, end: six, weight: 6 }));
    const { distance, path } = (0, dijkstra_1.findShortestPath)({ graph, start: zero, end: five });
    console.log(`The shortest path from ${zero.id} to ${five.id} is ${distance}`);
    console.log(`The path is ${path.map((node) => node.id).join(' -> ')}`);
};
execute();
//# sourceMappingURL=example.js.map